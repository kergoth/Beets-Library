#!/bin/sh
# shellcheck disable=SC2154,SC1090,SC2016,SC2140

export LC_ALL=en_US.utf-8
recent_times="1 3 7 14 30 45 60 90 120"

abspath() {
    _path="$1"
    if [ -n "${_path##/*}" ]; then
        _path="${2:-$PWD}/$1"
    fi
    echo "$_path"
}

abs_readlink() {
    for arg; do
        if [ -h "$arg" ]; then
            abspath "$(readlink "$arg")" "$(dirname "$arg")"
        else
            abspath "$arg"
        fi
    done
}

. "$(dirname "$(abs_readlink "$0")")/common-music.sh"

set -e

scriptdir="$(cd "$(dirname "$0")" && pwd)"
PATH="$scriptdir:$PATH"

usage() {
    cat >&2 <<END
    ${0##*/} [options] [PLAYLIST_DIR | PLAYLIST [PLAYLIST..]]

    PLAYLIST_DIR defaults to $playlistdir if no args are passed.

    Options:
    -p OUTPUT_DIR Specify where the new playlists will end up. Default: ./_Playlists
    -h    Show this usage info
    -e    Write an extended m3u
    -v    Verbose mode
END
    exit 2
}

playlistdir=./_Playlists
extm3u=
verbose=
while getopts vep:h opt; do
    case "$opt" in
        v)
            verbose=1
            ;;
        e)
            extm3u=1
            ;;
        p)
            playlistdir="$OPTARG"
            if ! [ -d "$playlistdir" ]; then
                echo >&2 "Error: OUTPUT_DIR $playlistdir must be an existing directory"
                usage
            fi
            ;;
        \? | h)
            usage
            ;;
    esac
done
shift $((OPTIND - 1))

list_playlists() {
    if [ $# -eq 0 ]; then
        find "$playlist_root" -type f -not -name .DS_Store
    else
        for arg; do
            echo "$arg"
        done
    fi
}

if [ $# -eq 0 ]; then
    playlist_root="$scriptdir/../Rockuefort Playlists"
elif [ $# -eq 1 ] && [ -d "$1" ]; then
    playlist_root="$1"
    shift
else
    playlist_root=
fi

mkdir -p "$playlistdir"
list_playlists "$@" | while read -r playlist; do
    if [ -n "$playlist_root" ]; then
        dir="$(dirname "${playlist#$playlist_root/}")"
    else
        dir=.
    fi
    destdir="$playlistdir/$dir"
    if [ "$dir" != "." ]; then
        rel="../$(echo "$dir/" | sed -e 's#[^/]*##g; s#/#../#g')"
    else
        rel=../
    fi
    mkdir -p "$destdir"
    rockuefort-gen-m3u ${verbose:+-v} -w ${extm3u:+-e} -r "$PWD" -p "${rel%/}" -d "$destdir" "$playlist"
    if ! [ -e "$destdir/${playlist##*/}.m3u8" ]; then
        echo >&2 "No playlist emitted for $playlist, cleaning up"
        rmdir "$destdir" 2>/dev/null || :
    fi
done

if [ -n "$playlist_root" ]; then
    if [ -e "$playlist_root/Random Single Tracks" ]; then
        echo >&2 "Processing Random Single Tracks.m3u8"
        find Single\ Tracks -type l \
            | sed -e 's#^#../#; s#/#\\#g' \
            | sort -R >"$playlistdir/Random Single Tracks.m3u8"
    fi

    # FIXME: avoid looking up mtimes repeatedly by gathering them up outside
    # of find up front, then filter by distance from the current time
    if [ -e "$playlist_root/Recent" ]; then
        echo >&2 "Processing Recent playlists"

        mkdir -p "$playlistdir/Recent"
        rm -f "$playlistdir/Recent"/*

        prev_timeframe=
        prev_outfile=
        for timeframe in $recent_times; do
            outfile="$playlistdir/Recent/Last $timeframe Days.m3u8"
            music_find . -mtime -"$timeframe" \
                | sed -e 's#^\./##' \
                | sed -e '/Albums/s#[^/]*$#/#' \
                | uniq-seen \
                | while read -r fn; do
                    case "$fn" in
                        */)
                            album_mtime=
                            music_find "${fn%/}" \
                                | while read -r album_fn; do
                                    if [ -z "$album_mtime" ]; then
                                        album_mtime=$(stat -L -f '%m' "$album_fn")
                                    fi
                                    printf '%s\t%s\n' "$album_mtime" "$album_fn"
                                done
                            ;;
                        *)
                            mtime="$(stat -L -f '%m' "$fn")"
                            printf '%s\t%s\n' "$mtime" "$fn"
                            ;;
                    esac
                done \
                | sort_tracks 1nr 2 3n \
                | sed -e 's#^[^	]*	##' \
                | sed -e 's#//#/#g; s#^#../../#; s#/#\\#g' \
                >"$outfile"
            nprev_outfile="$playlistdir/Recent/Last $prev_timeframe Days.m3u8"
            if [ -s "$nrpev_outfile" ]; then
                prev_outfile="$nprev_outfile"
            fi
            if ! [ -s "$outfile" ] || \
                ( [ -n "$prev_outfile" ] && cmp "$prev_outfile" "$outfile"; ); then
                rm -f "$outfile"
            fi
        done
        prev_timeframe=$timeframe
    fi

    if [ -e "$playlist_root/By Source" ]; then
        echo >&2 "Processing By Source playlists"
        if command -v greadlink >/dev/null 2>&1; then
            readlink=greadlink
        else
            readlink=readlink
        fi

        mkdir -p "$playlistdir/By Source"
        rm -f "$playlistdir/By Source"/*
        music_find . \
            | sed -e 's#^\./##' \
            | xargs-paste "$readlink" -f \
            | sed -n -e 's#\([^'"$TAB"']*'"$TAB"'\)\(.*/By Source\)/\([^/]*\)/\(.*\)#\3'"$TAB"'\1\2/\3/\4#p' \
            | sed -n -e 's#\([^'"$TAB"']*'"$TAB"'\)\(.*/Library\)/\([^/]*\)/\(.*\)#\3'"$TAB"'\1\2/\3/\4#p' \
            | sort_tracks 3 4 \
            | cut -d"$TAB" -f1-2 \
            | sed -e "s#$TAB#$TAB../../#; s#/#\\\\#g" \
            | while IFS="$TAB" read -r source link; do
                printf '%s\n' "$link" >>"$playlistdir/By Source/$source.m3u8"
            done
    fi
fi
