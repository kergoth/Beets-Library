## Metadata

importinspect:
  ignored:
    - day
    - month
    - original_day
    - original_month
  ignored_new:
    # When inspecting candidates, it's a given that release fields will
    # be added, and a number of these are shown already by the import interface,
    # so focus on non-release fields. Changes to existing release fields will still
    # be shown, as that's useful when retagging an existing item.
    - albumstatus
    - asin
    - barcode
    - catalognumber
    - catalognum
    - country
    - data_source
    - discogs_albumid
    - isrc
    - label
    - language
    - mb_albumartistid
    - mb_albumartistids
    - mb_albumid
    - mb_artistid
    - mb_artistids
    - mb_releasegroupid
    - mb_releasetrackid
    - mb_trackid
    - mb_workid
    - releasecountry
    - releasestatus
    - script

modifyonimport:
  modify_album:
    # Sane default for albumartist_sort
    'albumartist_sort::"^$" artist::"^The "': "albumartist_sort=%the{$albumartist}"
    # Need albumtypes
    'albumtype::. albumtypes::"^$"': "albumtypes=$albumtype"
    # Likely a single
    'albumtotal:1 albumtype::"^(|other)$"': "albumtype=single albumtypes=$single_albumtypes"
    # 'Various Artists' albums not flagged as compilations
    "album_query:is_various_not_comp": "comp=1"
    # Genre
    "genre:Holiday": "genre=Christmas"
    "genre:game": 'avmedia="Video Games"'
    "source:GOG": 'avmedia="Video Games"'
    "source:Steam": 'avmedia="Video Games"'
    'albumartist:Stephen Lynch': 'genre=Comedy'

    # Overrides from MusicBrainz
    #  These are soundtracks
    "album:Return to Zork": "albumtype=soundtrack albumtypes=soundtrack"
    "album:Civilization VI": "albumtype=soundtrack albumtypes=soundtrack"
    #  This is not music
    'album:"You Don''t Hear Jack"': "albumtype=spokenword albumtypes=spokenword"
    #  This is music *inspired by* a game, not an actual game soundtrack
    "album:Music to Go POSTAL By": "albumtype=album albumtypes=album"
  modify_album_items:
    "":
      # Sane default for artist_sort
      'artist_sort::"^$" artist::"^The "': "artist_sort=%the{$artist}"
      # Genre
      "genre:Holiday": "genre=Christmas"
      "genre:game": 'avmedia="Video Games"'
      'albumartist:Stephen Lynch': 'genre=Comedy'
      # Set single_track to 1 if there's only one track'
      'existing:1': "single_track=1"
  modify_singleton:
    # Sane default for artist_sort
    'artist_sort::"^$" artist::"^The "': "artist_sort=%the{$artist}"
    # Clear out the album field for imported singletons
    "album::.": "album="
    # Genre
    "genre:Holiday": "genre=Christmas"
    "genre:game": 'avmedia="Video Games"'
    "source:GOG": 'avmedia="Video Games"'
    "source:Steam": 'avmedia="Video Games"'

## Path Formats and Fields

replacefunc:
  # These replacements improve the visuals and navigation on the media player
  alt:
    # Marks I don't care about
    " *[™®©](?![a-zA-Z])": ""

    # Visual cleanup
    '[\x00-\x1f]': _
    '^\s+': ""
    '\s+$': ""

    # Revert asciify for certain chars
    '\.\.\.': "…"

    # Bad font rendering for these characters on the Shanling M0 DAP
    "“": '"'
    "”": '"'
    "‘": "'"
    "’": "'"

  album:
    # Consistency
    "Computec Edition Vol. 1": "Computec Edition, Vol. 1"
    "HGTV / Paste": "HGTV & Paste"
    "Kentucky Route Zero, Act II": "Kentucky Route Zero - Act II"
    "Video Games Live, Volume One": "Video Games Live: Level 1"

    # Ease navigation
    "Calling All Dawns: A Song Cycle": "Calling All Dawns"

  artist:
    # Deal with non-alphanumeric sort issues when browsing
    "_ensnare_": "ensnare"
    ":wumpscut:": "wumpscut"
    "“Weird Al” Yankovic": "Weird Al Yankovic"
    '\.mpegasus': "mpegasus"

    # Remove featuring artists for navigation
    ' ([fF]([eE][aA])?[tT]\.|w[/／]) .*': ""

    # Multi-artist
    " / .*": ""
    " *[,;](?! *Jr).*": ""
    "Chris Ballew and .*": "Chris Ballew"
    " with .*": ""

    # Consistency
    "George Alistair Sanger": "George Sanger"

    # Ease navigation
    'Amanda Palmer \+ The Grand Theft Orchestra': "Amanda Palmer"
    "Amanda Palmer & The Grand Theft Orchestra": "Amanda Palmer"
    "Bob Seger & the Silver Bullet Band": "Bob Seger"
    "Ben Harper With Charlie Musselwhite": "Ben Harper"
    "Bob Marley & The Wailers": "Bob Marley"
    "Stafford Bawler + Todd Baker": "Stafford Bawler"
    "Christopher Tin & Voces8": "Christopher Tin"

  franchise:
    "The Legend of Zelda": "Zelda"

  media:
    "Command & Conquer: Red Alert": "Red Alert"
    "Quest for Glory: Shadows of Darkness": "Quest for Glory IV"
    "The Chronicles of Riddick: Escape From Butcher Bay": "Riddick"
    "The Elder Scrolls V: Skyrim": "Skyrim"
    "The Incredible Adventures of Van Helsing": "Van Helsing"
    "Ultima: Worlds of Adventure 2: Martian Dreams": "Worlds of Ultima: Martian Dreams"

item_formats:
  path_filename: "%if{$album,$disc_and_track_pre}%if{$comp,%if{$artist_credit,$artist_credit,$artist} - }$full_title"
  full_title: "$title%if{$e_advisory,$explicit_or_clean}"

  format_item: "%ifdef{id,$format_id }%if{$singleton,,$format_album_title %nocolor{| }}$format_year %nocolor{- }$format_track"
  format_id: "%stylize{id,$id,[$id]}"
  format_album_title: "%stylize{album,$album%aunique{}}%if{$albumtypes,%stylize{albumtypes,%ifdef{atypes,%if{$atypes, $atypes}}}}"

  format_disc_and_track: "%stylize{track,$disc_and_track}"
  format_artist: "%stylize{artist,$artist} %nocolor{- }"
  format_title: "%stylize{title,$title$format_advisory}"
  format_track: "%if{$singleton,,%if{$disc_and_track,$format_disc_and_track %nocolor{- }}}$format_artist$format_title"
  format_advisory: "%if{$e_advisory,%if{$is_explicit,%stylize{explicit, (Explicit)},%if{$is_clean,%stylize{clean, (Clean)}}}}"
  format_year: "%stylize{year,$year}"

  browseable_path: "%pathfield{${navigation_path}}$extension"

album_formats:
  format_album: "%ifdef{id,$format_album_id }%if{$albumartist,$format_albumartist %nocolor{- }}$format_album_title %nocolor{| }$format_year"

  format_album_id: "%stylize{id,$id,[$id]}"
  format_album_title: "%stylize{album,$album%aunique{}}%if{$albumtypes,%stylize{albumtypes,%ifdef{atypes,%if{$atypes, $atypes}}}}%if{$e_albumadvisory, %stylize{explicit,(Explicit)}}"
  format_albumartist: "%stylize{albumartist,$albumartist}"
  format_year: "%stylize{year,$year}"

  # Allow for aliases with `-f '$format_item'` to be used when `-a` is passed
  format_item: "$format_album"

## Interoperability

alternativesplaylist:
  auto: True
  is_relative: true
  relative_to: playlist
  playlist_dir: _Playlists

## Miscellaneous

aliases:
  # Utilities
  # $ beet get-config alias.aliases.reimport
  get-config: '!sh -c "for arg; do beet config | yq -r \".$arg\"; done" -'
  # $ beet get-config-path library
  get-config-path: '!sh -c "p=\"$(beet config | yq -r \".$1\")\"; cd \"${BEETSDIR:-~/.config/beets}\" && abspath \"$p\"" -'

  recent:
    help: List recently added items
    command: ls -f '%stylize{field_added,$added} %nocolor{via }%stylize{source,$source} $format_item' 'added-'

  recent-albums:
    help: List recently added albums
    command: recent -a

  recent-singletons:
    help: List recently added singletons
    command: recent singleton:true

  lsl:
    help: List items, linking to their files
    command: ls -f '%link{file://$path,$icon} $format_item'
    aliases: ls-linked

  lsf:
    help: List items, with links to play them in foobar2000 (macOS only)
    command: ls -f '%link{shortcuts://run-shortcut?name=Open in foobar2000&input=text&text=%urlencode{$path},$icon} $format_item'

  lsb:
    help: List browseable paths for items, as they exist in the Browse structure.
    command: ls -f '$browseable_path'
    aliases: ls-browsable

  lse:
    help: List albums, showing existing and total tracks
    command: ls -a -f "$format_album %stylize{track,$existing/$albumtotal}"
    aliases: ls-existing

  ls-unmatched:
    help: List unmatched/unidentified albums
    command: ls -a mb_albumid:@

  ls-unmatched-singletons:
    help: List unmatched/unidentified singletons
    command: ls singleton:true mb_trackid:@

  reimport-unmatched:
    help: Reimport unmatched/unidentified items
    command: import -L mb_albumid:@

  # Strip release-specific tags. Useful in cases where the precise release
  # is unknown, or is not in MusicBrainz yet.
  norelease: modify 'asin!' 'isrc!' 'barcode!' 'catalognumber!' 'label!' 'media!' 'releasecountry!' 'releasestatus!' 'mb_albumid!' 'mb_workid!' 'mb_trackid!' 'mb_releasetrackid!' 'mb_releasegroupid!'

  # Extract embedded art only for albums missing a cover art file
  extract-missing-art: extractart -a artpath:^

  # Clear embedded art from albums that have an artpath, excluding single/sole tracks
  clearart-albums: clearart album_id::. artpath:% ^query:is_sole_track ^query:for_single_tracks

  # Edit 'media' fields
  edit-media: edit -f albumtypes -f albumtype -f avmedia -f franchise -f mediatitle -f mediatitledisambig

  reveal:
    help: Reveal items in file manager / Finder
    command: open -R --

  # Mac-specific
  picard:
    help: Open item(s) in MusicBrainz Picard
    command: 'open -A "-a MusicBrainz\ Picard" --'

  vlc:
    help: Open item(s) in VLC
    command: 'open -A "-a VLC" --'

  fb:
    help: Open item(s) in foobar2000
    command: 'open -A "-a foobar2000" --'
    aliases: foobar foobar2k foobar2000

  # Complete non-game/non-christmas albums with more than one track
  non-game-albums: ls -a existing:2.. missing:0 ^album_query:is_game ^genre:Christmas

  # Very basic dupe check for albums lacking musicbrainz data, primarily
  simple-dupe-check: 'dup -Fa -k albumartist -k album -k disctotal -k albumtotal -f "$format_album %nocolor{- }%stylize{track,$existing/$albumtotal} %nocolor{via }%stylize{source,$source}"'
  dup-albums: dup -aF
  dup-games: dup -aF -f '$franchise - $mediatitle - $mediatitledisambig | $format_album' -k franchise -k mediatitle -k mediatitledisambig query:is_game mediatitle:%

  music: ls \^query:is_non_music
  singletons: ls singleton:true
  complete: ls -a missing:0
  high-res: ls-format samplerate:96000..
  ls-format: ls -f '%color{format,$format} %nocolor{| }%color{format,$samplerate} %nocolor{| }$format_item'

  # Show incomplete albums, skipping any albums where I only have one track
  incomplete-albums: ls-existing missing:1.. \^album_query:is_game one_track:0 ^album:sampler ^albumtypes:sampler'
  incomplete-games: ls-existing missing:2.. one_track:0 album_query:is_game'
  incomplete: ls-existing missing:1.. \^album_query:is_game one_track:0 , missing:2.. one_track:0 album_query:is_game'

  # Red flags
  empty-artist: ls artist:@
  empty-album: ls album:@ singleton:false
  book-not-audiobook: ls genre:book ^albumtypes:audiobook
  unknown-source: ls source:Unknown , source:@
  excess-tracks: 'ls -f "$format_item %stylize{track,$track/$tracktotal} %nocolor{via }%stylize{source,$source}" excess_tracks:1'
  negative-missing: 'ls -a -f "$missing - $format_album" missing:..-1'
  original-is-newer:
    help: 'Red Flag: Is the original release year is newer than the current year?'
    command: ls -a -f "$format_album %nocolor{| }%stylize{year,$original_year} > %stylize{year,$year}" original_is_newer:1

  # Potential concerns
  missing-albumtotal: 'ls -a -f "$format_album %stylize{track,$existing_by_disc}" one_track:false albumtotal:0'
  # This is automatically corrected in modifyonimport
  various-not-comp: ls -a album_query:is_various_not_comp

  # Informative
  non-mb-albums: ls -a mb_albumid:@
  possible-singles: ls -a albumtotal:1 albumtypes::'^(|other)$'
  possible-not-comp: ls -a comp:1 missing:0 is_comp_same_artists:1
  # These are often not an issue, just albums which feature multiple
  # artists, but aren't compilations. Cases where the album artist is the
  # producer, cases where there are featuring artist, etc.
  multiartist-not-comp: ls -a comp:0 multiartist:1
  has-multiple-genres: ls -a -f '%if{$album_genres,%stylize{genre,$album_genres} }$format_album' all_same_genres:0

inlinehook:
  hooks:
    - event: "album_imported"
      handler: |
        from beets.ui import UserError, log

        log.info(f'Running sanity checks on album {album}')

        items = album.items()
        if not album.albumtotal:
          log.warning(f'No track total found for {album}')
        elif len(items) > album.albumtotal:
          log.warning(f'Excess items ({len(items)} > {album.albumtotal}) for {album}')
        if not album.albumartist:
          log.warning(f'Album artist not set for {album}')
        if album.albumtype and not album.albumtypes:
          log.warning(f'Album type set, but `albumtypes` is not set for {album}')
        if album.year and album.original_year and album.original_year > album.year:
          log.warning(f'Original release year is newer than the current year for {album}')
        if album.genre == 'soundtrack' and 'soundtrack' not in album.albumtypes:
          log.warning(f'Genre is `soundtrack`, but `albumtypes` does not include `soundtrack` for {album}')
        if (album.genre == 'soundtrack' or 'soundtrack' in album.albumtypes):
          if not album.get('avmedia'):
            log.warning(f'Album is a soundtrack, but `avmedia` is not set for {album}')
          if not album.get('mediatitle'):
            log.warning(f'Album is a soundtrack, but `mediatitle` is not set for {album}')

        for item in items:
          if not item.artist:
            log.warning(f'Artist not set for {item}')
          if item.genre.lower() == 'book' and 'audiobook' not in item.albumtypes:
            log.warning(f'Genre is `book`, but `albumtypes` does not include `audiobook` for {item}')
          if item.year and item.original_year and item.original_year > item.year:
            log.warning(f'Original release year is newer than the current year for {item}')
          if item.genre == 'soundtrack' and 'soundtrack' not in item.albumtypes:
            log.warning(f'Genre is `soundtrack`, but `albumtypes` does not include `soundtrack` for {item}')

    - event: "item_imported"
      handler: |
        from beets.ui import UserError, log

        log.info(f'Running sanity checks on item {item}')

        if not item.artist:
          log.warning(f'Artist not set for {item}')
        if item.genre.lower() == 'book' and 'audiobook' not in item.albumtypes:
          log.warning(f'Genre is `book`, but `albumtypes` does not include `audiobook` for {item}')
        if item.year and item.original_year and item.original_year > item.year:
          log.warning(f'Original release year is newer than the current year for {item}')
        if item.genre == 'soundtrack' and 'soundtrack' not in item.albumtypes:
          log.warning(f'Genre is `soundtrack`, but `albumtypes` does not include `soundtrack` for {item}')
        if (item.genre == 'soundtrack' or 'soundtrack' in item.albumtypes):
          if not item.get('avmedia'):
            log.warning(f'Item is a soundtrack, but `avmedia` is not set for {item}')
          if not item.get('mediatitle'):
            log.warning(f'Item is a soundtrack, but `mediatitle` is not set for {item}')

album_queries:
  is_game: 'avmedia:"Video Games"'
  is_incomplete_album: "album_query:is_game missing:2.. , ^album_query:is_game missing:1.."
  is_sampler: "albumtypes:sampler , album:sampler"
  # This is used both in an alias command and modifyonimport
  is_various_not_comp: 'comp:0 albumartist:@"Various Artists"'
  by_label: 'label:"OverClocked ReMix"'
  separated_by_genre: "genre:Comedy , genre:Humor , genre:Humour , genre:Nerdcore"

item_queries:
  # Used by the sole-tracks script
  is_mfp: 'label:"Music for Programming"'
  is_ocremix: 'label:"OverClocked ReMix"'
  sole_track_candidates: 'query:is_music \^query:is_mfp \^query:is_ocremix \^query:is_game'

  # As-needed
  albums_to_split_up: "query:is_incomplete_album existing:..4"
  is_incomplete_album: "query:is_game missing:2.. , ^query:is_game missing:1.."
  is_loved: album_loved:true , loved:true query:for_single_tracks
  has_lyrics: lyrics::. ^lyrics:=[Instrumental] ^lyrics:=XXX

  # General and Path Formats. A number of these are used by the `kergoth` plugin for $navigation_path.
  for_single_tracks: "album_id:^ , single_track:true"
  is_christmas: "genre:Christmas"
  is_classical: "genre:Classical"
  is_game: 'avmedia:"Video Games"'
  is_chiptune: "genre:chiptune , genre:8-bit"
  is_music: "^query:is_non_music"
  is_non_music: 'genre:speech , genre:meditation , genre:dharma , genre:book , genre:spoken , genre:background , albumtypes:spokenword , albumtypes:audiobook , albumtypes:"audio drama" , albumtypes:interview'
  is_sampler: "albumtypes:sampler , album:sampler"
  is_sole_track: "sole_track:true"
  is_soundtrack: "albumtypes:soundtrack"
  separated_by_genre: "genre:Comedy , genre:Humor , genre:Humour , genre:Nerdcore"

  # Categories
  alt_game_extra: "^albumtypes:soundtrack query:is_game"
  alt_game: "query:is_game albumtypes:soundtrack"
  alt_to_listen: "to_listen:true"
  by_label_flat: 'label:"Music for Programming"'
  by_label: 'label:"OverClocked ReMix"'
  chiptune_game: "query:is_chiptune query:is_game query:is_soundtrack"
  chiptune_game_extra: "query:is_chiptune query:is_game ^query:is_soundtrack"
  chiptune: "query:is_chiptune"
  christmas_sole_tracks: "genre:Christmas query:is_sole_track"
  christmas: "query:is_christmas"
  classical_sole_tracks: "genre:classical query:is_sole_track"
  classical: "query:is_classical ^query:is_soundtrack"
  non_music: 'genre:meditation , genre:background , albumtypes:spokenword , albumtypes:audiobook , albumtypes:"audio drama" , albumtypes:interview'
  sampler: "query:is_sampler ^query:for_single_tracks"
  soundtrack: "query:is_soundtrack ^query:for_single_tracks"

## Config-Specific

reimportskipfields:
  set_fields: reimported

soletracks:
  query: single_track:yes query:sole_track_candidates ^query:is_loved
  check_query: query:sole_track_candidates ^comp:1 ^query:is_loved
  # I don't need to check_single_track, as I already use a flexible field `single_track`
  check_single_track: no
  sections:
    - query:is_christmas ^query:is_classical
    - query:is_classical ^query:is_christmas
    - ^query:is_classical ^query:is_christmas
