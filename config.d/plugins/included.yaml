## Metadata

edit:
  itemfields: track title artist album albumdisambig tracktotal year
  albumfields: album albumartist tracktotal year

embedart:
  auto: false

fetchart:
  # Set art_source field
  store_source: true
  # Prefer higher resolution art
  high_resolution: true

lyrics:
  auto: true
  sources: bandcamp genius musixmatch

replaygain:
  # Disable at import-time, as it's quite slow
  auto: false
  # Compute with ffmpeg
  backend: ffmpeg
  # Don't use the Opus format-specific R128 fields
  r128: []
  # Target loudness level is -18 LUFS / 89 Decibels
  targetlevel: 89
  # Use the true peak method, not sample
  peak: "true"

zero:
  fields: month day original_month original_day comments
  comments: [EAC, LAME]
  update_database: true

## Metadata Source

discogs:
  separator: '; '

## Path Formats

albumtypes:
    # Excluded: album, Album, other, sampler, Audio drama, interview
    # Excluded Discogs types: FLAC, MP3, Stereo, Promo, Reissue, Release, Demo, Interview
    # Fixed to remove: Limited Edition, FLAC
    types:
    # Default
    #  Primary types
    - [ep, EP]
    - [single, Single]
    #  Secondary types
    - [soundtrack, OST]
    - [live, Live]
    - [compilation, Anthology]
    - [remix, Remix]
    # Added by me
    - [audiobook, Audiobook]
    - [audio drama, Audio Drama]
    - [dj-mix, Mix]
    - [mixtape, Mixtape]
    - [mixtape/street, Mixtape]
    - [spokenword, Spoken]
    # Non-MusicBrainz importer, i.e. Discogs
    - [Compilation, Anthology]
    - [EP, EP]
    - [Mixtape, Mixtape]
    - [Single, Single]
    ignore_va: [compilation, Compilation]
    bracket: '[]'

bucket:
  bucket_alpha: ["A - D", "E - L", "M - R", "S - Z"]
  bucket_alpha_regex:
    "A - D": ^[0-9a-dA-D…äÄ]

# It's irritating that we can't reference other inline fields to avoid this
# code duplication amongst album and item fields.
album_fields:
  album_field_context: "', '.join(g for g in sorted(globals()) if not g.startswith('__'))"

  icon: '"📁"'

  # First album artist (usually primary)
  first_albumartist: albumartists[0] if albumartists else albumartist

  # Deal with undefined values for queries
  e_albumadvisory: albumadvisory if 'albumadvisory' in globals() else 0
  e_loved: loved if 'loved' in globals() else False
  e_disliked: disliked if 'disliked' in globals() else False
  e_hidden: hidden if 'hidden' in globals() else False
  e_to_listen: to_listen if 'to_listen' in globals() else False

  # Album fields masked by the item, renamed for use from that context
  album_composer: composer if 'composer' in globals() else False
  album_id: id
  album_added: added
  album_genre: genre
  album_year: year
  album_loved: loved if 'loved' in globals() else False
  album_disliked: disliked if 'disliked' in globals() else False
  album_hidden: hidden if 'hidden' in globals() else False
  album_to_listen: to_listen if 'to_listen' in globals() else False

  # Album vs item genre
  album_genres: "','.join(sorted(set(filter(None, (item.genre for item in items)))))"
  all_same_genres: all(item.genre == items[0].genre for item in items)

  # Compare to release group title
  title_matches_group: release_group_title.lower() == album.lower()

  albumartist_credit_case: |
    return albumartist_credit and albumartist != albumartist_credit and albumartist.lower() == albumartist_credit.lower()

  albumartist_credit_case_only: |
    albumartist_credit = globals().get('albumartist_credit')
    return albumartist_credit and albumartist != albumartist_credit and albumartist.lower() == albumartist_credit.lower()

  # Number of existing tracks in the library in this album
  existing: len(items)

  # How many tracks exist in the library for each disc of an album
  existing_by_disc: |
    from itertools import groupby
    def keyfunc(i):
      return i.disc or 0
    grouped = groupby(sorted(items, key=keyfunc), keyfunc)
    by_disc = [(k, len(list(v))) for k, v in grouped]
    return ','.join(str(v[1]) for v in sorted(by_disc))

  # Albums with one existing track in the library
  one_track: len(items) == 1

  # This is flagged as a compilation, but all the track artists are the same.
  # Consider setting albumartist instead. This only works when missing:0 at
  # the moment, as I can't get to the list of *available* tracks, only the
  # existing ones.
  is_comp_same_artists: comp and all(item.artist == items[0].artist for item in items)

  # Album with items whose artists differ
  multiartist: |
    first = items[0]
    first_artist = first.artists[0] if first.artists else first.artist
    return any(((item.artists[0] if item.artists else item.artist) != first_artist) for item in items)

  # Album with no genre set, whose items have differing genre
  needs_album_genre: |
    genres = [i.genre for i in items]
    if not genre and any(g for g in genres):
      same_genres = all(g == genres[0] for g in genres)
      if not same_genres:
        return 1
    return 0

  # Not used at this time, only made available
  album_all_genre: items[0].genre if all(item.genre == items[0].genre for item in items) else ''
  album_all_composer: items[0].composer if all(item.composer == items[0].composer for item in items) else ''
  # For albums with bpm tags on all their tracks, give us the mean
  average_bpm: |
    item_bpms = [getattr(i, 'bpm', 0) for i in items]
    if all(i > 0 for i in item_bpms):
      return int(sum(item_bpms) / len(items))
    else:
      return 0
  existing_discs: |
    discs = sorted(set(i.disc for i in items if i.disc))
    return ','.join(str(d) for d in discs)
  has_explicit_track: any(getattr(item, 'advisory', 0) == 1 for item in items)
  multidisc: disctotal > 1

  # Alter 'albumtypes' to add 'single' and drop other/album/ep.
  single_albumtypes: |
    if globals().get('albumtypes'):
      if isinstance(albumtypes, str):
        types = [t.strip() for t in albumtypes.split(';')]
      else:
        types = albumtypes[:]
      for t in ['other', 'album', 'ep']:
        if t in types:
          types.remove(t)
      types.insert(0, 'single')
      return '; '.join(t for t in types if t)
    return 'single'

  discogs_albumtypes: |
    types = '; '.join(albumtypes).lower().split(", ")
    for t in ['flac', 'mp3', 'stereo', 'release', 'reissue']:
      if t in types:
        types.remove(t)
    for t in ['ep', 'single', 'album', 'other']:
      if t in types:
        types.remove(t)
        types[0:0] = [t]
    return '; '.join(t for t in types if t)

  discogs_albumtype: |
    types = '; '.join(albumtypes).lower().split(", ")
    for t in ['flac', 'mp3', 'stereo', 'release', 'reissue']:
      if t in types:
        types.remove(t)
    for t in ['ep', 'single', 'album', 'other']:
      if t in types:
        return t
    return types[0]

  original_is_newer: original_year and year and original_year > year

item_fields:
  item_field_context: "', '.join(g for g in sorted(globals()) if not g.startswith('__'))"

  icon: '"📄"'

  # First artist (usually primary)
  first_artist: artists[0] if artists else artist

  artist_differs: artist if artist != albumartist else ''
  artist_sort_equal: artist_sort == artist

  artist_credit_case: return artist_credit and artist != artist_credit and artist.lower() == artist_credit.lower()

  artist_credit_case_only: |
    artist_credit = globals().get('artist_credit')
    return artist_credit and artist != artist_credit and artist.lower() == artist_credit.lower()

  # Deal with undefined values for queries
  e_advisory: advisory if 'advisory' in globals() else 0
  e_loved: loved if 'loved' in globals() else False
  e_disliked: disliked if 'disliked' in globals() else False
  e_hidden: hidden if 'hidden' in globals() else False
  e_to_listen: to_listen if 'to_listen' in globals() else False

  # disc and track prefix with ' - ' sep. Returns '' if track == 0 or this is the only track.
  disc_and_track_pre: |
    if not track or (tracktotal and tracktotal == 1):
      return ''
    elif disctotal > 1:
      return u'%02i.%02i - ' % (disc, track)
    else:
      return u'%02i - ' % track

  disc_and_track: |
    if not track or (tracktotal and tracktotal == 1):
      return ''
    elif disctotal > 1:
      return u'%02i.%02i' % (disc, track)
    else:
      return u'%02i' % track

  # Do we have more tracks than we should for this album?
  excess_tracks: bool(tracktotal and track and track > tracktotal)

  # Clean or Explicit tracks
  explicit_or_clean: |
    if 'advisory' in globals():
      if advisory == 1:
        return ' (Explicit)'
      elif advisory == 2:
        return ' (Clean)'
    else:
      return ''

  is_explicit: globals().get('advisory', 0) == 1
  is_clean: globals().get('advisory', 0) == 2

  # Not used at this time, only made available
  definite_year: u'%04i' % original_year or original_date[:3] or year or date[:3] or 0
  # Avoid the leading zero
  trim_track: str(track)
  trim_disc: str(disc)

  alt_browse: globals().get('alt.browse', '')

## Interoperability

playlist:
  auto: true
  relative_to: playlist
  playlist_dir: Library/Playlists

## Miscellaneous

badfiles:
  check_on_import: yes
  commands:
    m4a: ffmpeg -v error -f null - -i
    mp4: ffmpeg -v error -f null - -i
    ogg: oggz-validate
    wv: wvunpack -vq

fuzzy:
  # Default ~ prefix conflicts with case-insensitive exact match prefix
  prefix: "*"

hook:
  hooks:
    - event: alternative_before_update
      command: ./hooks/alternative_before_update "{alternative}" "{directory}"
    - event: alternative_updated
      command: ./hooks/alternative_updated "{alternative}" "{directory}"
    - event: import
      command: ./hooks/import

types:
  # Built-in or Plugin fields
  albumtotal: int
  bpm: int

  # Album inline and format fields
  album_id: int
  album_added: date
  album_loved: bool
  album_year: int
  all_same_genres: bool
  average_bpm: int
  e_albumadvisory: int
  albumadvisory: int
  existing: int
  for_single_tracks: bool
  has_explicit_track: bool
  is_comp_same_artists: bool
  multiartist: bool
  multidisc: bool
  one_track: bool
  albumartist_credit_case: bool
  title_matches_group: bool
  original_is_newer: bool

  # Item inline and format fields
  e_advisory: int
  advisory: int
  e_loved: bool
  e_disliked: bool
  e_hidden: bool
  e_to_listen: bool
  excess_tracks: bool
  artist_credit_case: bool
  is_explicit: bool
  is_clean: bool
  artist_sort_equal: bool

  # Flexible fields
  #franchise: string
  #mediatitle: string
  #mediatitledisambig: string
  disliked: bool
  hidden: bool
  loved: bool
  to_listen: bool

  # These are essentially set as cached values, to speed up path formats
  incomplete: bool
  single_track: bool
  sole_track: bool

  # set_fields
  reimported: bool

unimported:
  ignore_extensions: jpg png pdf txt log cue html nfo rtf doc m3u DS_Store par2
  ignore_subdirectories: ""
