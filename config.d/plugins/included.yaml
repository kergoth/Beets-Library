## Metadata

edit:
  itemfields: track title artist album albumdisambig tracktotal year
  albumfields: album albumartist tracktotal year

embedart:
  auto: false

fetchart:
  # Set art_source field
  store_source: true
  # Prefer higher resolution art
  high_resolution: true

zero:
  fields: month day original_month original_day comments
  comments: [EAC, LAME]
  update_database: true

## Path Formats

bucket:
  bucket_alpha: ['A - D', 'E - L', 'M - R', 'S - Z']
  bucket_alpha_regex:
    'A - D': ^[0-9a-dA-D…äÄ]

# It's irritating that we can't reference other inline fields to avoid this
# code duplication amongst album and item fields.
album_fields:
  album_field_context: "', '.join(g for g in sorted(globals()) if not g.startswith('__'))"

  # Deal with undefined values for queries
  e_albumadvisory: albumadvisory if 'albumadvisory' in globals() else 0
  e_loved: loved if 'loved' in globals() else False

  # Album fields masked by the item, renamed for use from that context
  album_composer: composer if 'composer' in globals() else False
  album_id: id
  album_loved: loved if 'loved' in globals() else False

  # Album vs item genre
  album_genres: "','.join(sorted(set(filter(None, (item.genre for item in items)))))"
  all_same_genres: all(item.genre == items[0].genre for item in items)

  # Number of existing tracks in the library in this album
  existing: len(items)

  # How many tracks exist in the library for each disc of an album
  existing_by_disc: |
    from itertools import groupby
    def keyfunc(i):
      return i.disc or 0
    grouped = groupby(sorted(items, key=keyfunc), keyfunc)
    by_disc = [(k, len(list(v))) for k, v in grouped]
    return ','.join(str(v[1]) for v in sorted(by_disc))

  # Albums with one existing track in the library
  one_track: len(items) == 1

  # This is flagged as a compilation, but all the track artists are the same.
  # Consider setting albumartist instead. This only works when missing:0 at
  # the moment, as I can't get to the list of *available* tracks, only the
  # existing ones.
  is_comp_same_artists: comp and all(item.artist == items[0].artist for item in items)

  # Album with items whose artists differ
  multiartist: not bool(all(item.artist == items[0].artist for item in items))

  # Album with no genre set, whose items have differing genre
  needs_album_genre: |
    genres = [i.genre for i in items]
    if not genre and any(g for g in genres):
      same_genres = all(g == genres[0] for g in genres)
      if not same_genres:
        return 1
    return 0

  # Not used at this time, only made available
  album_all_genre: items[0].genre if all(item.genre == items[0].genre for item in items) else ''
  album_all_composer: items[0].composer if all(item.composer == items[0].composer for item in items) else ''
  # For albums with bpm tags on all their tracks, give us the mean
  average_bpm: |
    item_bpms = [getattr(i, 'bpm', 0) for i in items]
    if all(i > 0 for i in item_bpms):
      return int(sum(item_bpms) / len(items))
    else:
      return 0
  existing_discs: |
    discs = sorted(set(i.disc for i in items if i.disc))
    return ','.join(str(d) for d in discs)
  has_explicit_track: any(getattr(item, 'advisory', 0) == 1 for item in items)
  multidisc: disctotal > 1

item_fields:
  item_field_context: "', '.join(g for g in sorted(globals()) if not g.startswith('__'))"

  # Deal with undefined values for queries
  e_advisory: advisory if 'advisory' in globals() else 0
  e_loved: loved if 'loved' in globals() else False

  # disc and track prefix with ' - ' sep. Returns '' if track == 0 or this is the only track.
  disc_and_track_pre: |
    if not track or (tracktotal and tracktotal == 1):
      return ''
    elif disctotal > 1:
      return u'%02i.%02i - ' % (disc, track)
    else:
      return u'%02i - ' % track

  # Do we have more tracks than we should for this album?
  excess_tracks: bool(tracktotal and track and track > tracktotal)

  # Clean or Explicit tracks
  explicit_or_clean: |
    if 'advisory' in globals():
      if advisory == 1:
        return ' (Explicit)'
      elif advisory == 2:
        return ' (Clean)'
    else:
      return ''

  # Alter 'albumtypes' to add 'single' and drop other/album/ep.
  single_albumtypes: |
    if 'albumtypes' in globals():
      types = [t.strip() for t in albumtypes.split(';')]
      for t in ['other', 'album', 'ep']:
        if t in types:
          types.remove(t)
      types.insert(0, 'single')
      return '; '.join(types)
    return 'single'

  # Not used at this time, only made available
  definite_year: u'%04i' % original_year or original_date[:3] or year or date[:3] or 0
  # Avoid the leading zero
  trim_track: str(track)
  trim_disc: str(disc)

## Interoperability

playlist:
  auto: true
  relative_to: playlist
  playlist_dir: Library/Playlists

## Miscellaneous

badfiles:
    check_on_import: yes
    commands:
        m4a: ffmpeg -v error -f null - -i
        mp4: ffmpeg -v error -f null - -i
        ogg: oggz-validate

types:
  # Built-in or Plugin fields
  albumtotal: int
  bpm: int

  # Album inline and format fields
  album_id: int
  album_loved: bool
  all_same_genres: bool
  average_bpm: int
  e_albumadvisory: int
  existing: int
  for_single_tracks: bool
  has_explicit_track: bool
  is_comp_same_artists: bool
  multiartist: bool
  multidisc: bool
  one_track: bool

  # Item inline and format fields
  e_advisory: int
  e_loved: bool
  excess_tracks: bool

  # Flexible fields
  #franchise: string
  #mediatitle: string
  #mediatitledisambig: string
  disliked: bool
  loved: bool
  to_listen: bool

  # These are essentially set as cached values, to speed up path formats
  incomplete: bool
  single_track: bool
  sole_track: bool

  # set_fields
  reimported: bool
