directory: ../Library
library: ../Library/library.db
statefile: ../Library/state.pickle
# Ugh, relative plugin paths are based on PWD, not BEETSDIR
pluginpath:
  - ./plugins
  - ./Beets/plugins

per_disc_numbering: true
id3v23: true
format_album: '$format_album'
format_item: '$format_item'
sort_album: albumartist+ album+
sort_item: albumartist+ album+ disc+ track+ artist+

paths:
  default: '$source/$comp_albumartist_credit/%if{$album,$album%aunique{},[non-album tracks]}/$path_filename'
  singleton: '$source/$artist/[non-album tracks]/$path_filename'
  comp: '$source/$comp_albumartist_credit/%if{$album,$album%aunique{},[non-album tracks]}/$path_filename'
  ext:log: $albumpath/$album
  ext:cue: $albumpath/$album

# For unicode lookalikes, see:
# http://www.unicode.org/Public/security/latest/confusables.txt
replace:
  ' *:': '∶'

  # Remove a leading period that would make it hidden on unix/mac systems
  '^\.': ''

path_sep_replace: ／

import:
  log: ../Library/import.log
  timid: true
  incremental: true
  default_action: skip
  set_fields:
    # source is where I obtained the music. iTunes, Amazon, Other, etc.
    source: 'Unknown'

# files matching these patterns are deleted from source after import
clutter: ["Thumbs.DB", ".DS_Store", "*.m3u"]

match:
  preferred:
    countries: ['US', 'GB|UK']
    media: ['Digital Media|File', 'CD']
    original_year: yes
  ignored: unmatched_tracks
  ignored_media: ['Data CD', 'DVD', 'DVD-Video', 'Blu-ray', 'HD-DVD',
                  'VCD', 'SVCD', 'UMD', 'VHS', '12" Vinyl']

plugins:
  # Stock plugins
  - absubmit
  - acousticbrainz
  - badfiles
  - convert
  - chroma
  - discogs
  - duplicates
  - edit
  - embedart
  - export
  - fetchart
  - fromfilename
  - hook
  - info
  - inline
  - mbsync
  - missing
  - playlist
  - smartplaylist
  - spotify
  - the
  - types

  # 3rd party plugins
  - alternatives
  - bandcamp
  - copyartifacts
  - join_albums
  - noimport

  # My local plugins
  # Calculate acoustic fingerprint, only against non-musicbrainz tracks, and
  # save the values rather than submitting them.
  - abcalc
  # Define beet command aliases, much like you can with git
  - alias
  # Define saved format strings by storing them in fields
  - saved_formats
  # Define hooks via inline python
  - inline_hook
  # Keep track of the most recently imported items, useful in hooks
  - last_import
  # Add `replace` format function for applying specific sets of replacements
  - replace_format
  # Define named/saved queries, and define fields using those queries
  - saved_queries
  # Named queries and query prefixes from the Beets source. 'any:', @ prefix
  # for exact match, and ^ prefix for a None value.
  - existing_queries
  # % prefix for non-NULL/non-None
  - other_queries
  - spotify_explicit

acousticbrainz:
  tags:
    - bpm
    - mood_acoustic
    - mood_aggressive
    - mood_electronic
    - mood_happy
    - mood_party
    - mood_relaxed
    - mood_sad

alias:
  aliases:
    # Utilities
    # $ beet get-config alias.aliases.reimport
    get-config: '!sh -c "beet config | yq -r \".$1\"" -'
    # $ beet get-config-path library
    get-config-path: '!sh -c "p=\"$(beet config | yq -r \".$1\")\"; cd \"${BEETSDIR:-~/.config/beets}\" && abspath \"$p\"" -'

    reimport: import -maL
    reimport-mb: reimport mb_albumid:@

    # Strip release-specific tags. Useful in cases where the precise release
    # is unknown, or is not in MusicBrainz yet.
    norelease: modify 'asin!' 'isrc!' 'barcode!' 'catalognumber!' 'label!' 'media!' 'releasecountry!' 'releasestatus!' 'mb_albumid!' 'mb_workid!' 'mb_trackid!' 'mb_releasetrackid!' 'mb_releasegroupid!'

    # Extract embedded art only for albums missing a cover art file
    extract-missing-art: extractart -a artpath:^

    # Clear embedded art from albums that have an artpath
    clearart-albums: clearart album_id::. ^artpath:^

    missing-art: fetchart -q
    reveal: open -R --

    # Mac-specific alias
    picard: 'open -A "-a MusicBrainz\ Picard" --'
    vlc: 'open -A "-a VLC" --'

    dup-albums: dup -aF

    # Complete non-game/non-christmas albums with more than one track
    non-game-albums: complete single_track:0 ^query:is_game ^query:is_christmas

    # Very basic dupe check for albums lacking musicbrainz data, primarily
    simple-dupe-check: 'dup -Fa -k albumartist -k album -k disctotal -k albumtotal -f "[$id] $albumartist - $album - $existing/$albumtotal via $source"'

    music: ls \^query:is_non_music
    singletons: ls singleton:true
    complete: ls -a incomplete:0
    high-res: albums-for samplerate:96000..

    # Show incomplete albums, skipping any albums where I only have one track
    incomplete-albums: 'ls -a -f "[$id] $albumartist - $album $existing/$albumtotal" missing:1 \^query:is_game single_track:0'
    incomplete-games: 'ls -a -f "[$id] $albumartist - $album $existing/$albumtotal" missing:2.. single_track:0 query:is_game'

    # Red flags
    empty-artist: ls artist:@
    empty-album: ls album:@ singleton:false
    book-not-audiobook: ls genre:book ^albumtype:audiobook
    unknown-source: ls source:Unknown
    excess-tracks: 'ls -f "$format_item $track/$tracktotal via $source" excess_tracks:1'
    red-flags: '!sh -c "(set -x; beet empty-artist; beet empty-album; beet book-not-audiobook; beet unknown-source; beet excess-tracks) | python3 -c \"import sys; d=sys.stdin.read(); print(d); sys.exit(bool(d))\""'

    # Potential concerns
    unknown-soundtracks: albums-for albumtype:soundtrack \^genre:soundtrack \^genre:game \^genre:videogame \^genre:vgm
    missing-albumtotal: 'ls -a -f "$format_album $existing_by_disc" single_track:0 albumtotal:0'
    # This is automatically corrected in my import hook
    various-not-comp: ls -a album_query:is_various_not_comp

    # Informative
    non-mb-albums: ls -a mb_albumid:@
    possible-singles: ls -a albumtotal:1 albumtype::'^(|other)$'
    possible-not-comp: ls -a comp:1 incomplete:0 is_comp_same_artists:1
    # These are often not an issue, just albums which feature multiple
    # artists, but aren't compilations. Cases where the album artist is the
    # producer, cases where there are featuring artist, etc.
    multiartist-not-comp: ls -a comp:0 multiartist:1
    has-multiple-genres: ls -a -f '$album_genres $format_album' all_same_genres:0

    recent: ls -a 'added+' -f '$added $format_album'

bandcamp:
  art: true
  lyrics: true
  description: comments
  split_artist_title: true

copyartifacts:
  extensions: .cue .log .jpg .png .txt .pdf .doc .rtf

embedart:
  auto: false

fetchart:
  # Default
  sources: filesystem coverart itunes amazon albumart
  # Set art_source field
  store_source: true

hook:
  hooks:
    - event: import
      command: "sh -c '[ -z \"$BEETS_NO_HOOKS\" ] && \"${{BEETSDIR:-~/.config/beets}}/hooks/import\" \"$@\"' - \"{lib.path}\" \"{lib.directory}\" \"{paths}\""

inline_hook:
  hooks:
    - event: import_task_created
      handler: |
        from beets import config, ui
        set_fields = config['import']['set_fields']
        if 'source' not in set_fields.keys() or set_fields['source'].as_str() == 'Unknown':
          raise ui.UserError('No source specified, please include --set=source=SOURCE')

playlist:
  auto: true
  relative_to: ..
  playlist_dir: Library/Playlists

types:
  # Flexible fields. Use e_<field> to deal with it being undefined db-only
  # version of itunesadvisory. 1 == Explicit, 2 == Clean
  advisory: int
  # 1 == explicit album (contains at least one explicit track)
  albumadvisory: int

  # Default values for the above
  e_advisory: int
  e_albumadvisory: int

  # Built-in or Plugin fields
  albumtotal: int
  bpm: int

  # Deal with `missing` going negative
  e_missing: int

  # Album inline and format fields
  album_id: int
  existing: int
  is_comp_same_artists: bool
  has_explicit_track: bool
  all_same_genres: bool
  multiartist: bool
  multidisc: bool
  single_track: bool
  incomplete: bool
  average_bpm: int

  # Item inline and format fields
  excess_tracks: bool

# It's irritating that we can't reference other inline fields to avoid this
# code duplication amongst album and item fields.
album_fields:
  album_field_context: "', '.join(g for g in sorted(globals()) if not g.startswith('__'))"

  # Number of existing tracks in this album
  existing: len(items)

  # Used by the missing-albumtotal alias
  existing_by_disc: |
    from itertools import groupby
    def keyfunc(i):
      return i.disc or 0
    grouped = groupby(sorted(items, key=keyfunc), keyfunc)
    by_disc = [(k, len(list(v))) for k, v in grouped]
    return ','.join(str(v[1]) for v in sorted(by_disc))

  # Not used at this time, only made available
  existing_discs: |
    discs = sorted(set(i.disc for i in items if i.disc))
    return ','.join(str(d) for d in discs)

  single_track: len(items) == 1

  multidisc: disctotal > 1
  # Let me search for albums that may be a compilation but aren't flagged
  multiartist: not bool(all(item.artist == items[0].artist for item in items))

  # Heuristic based approach to determining whether an album is incomplete. If
  # we have tracktotals, then we can take the naive approach, but if not, we
  # can assume that if the # of tracks is less than the highest track number,
  # this is an incomplete album. For example, an album with a single track
  # whose track number is 9, we can assume it's incomplete.
  #
  # This is needed as the `missing` plugin gives a negative value for any
  # album lacking tracktotal.
  incomplete: |
    from beets import config

    per_disc = config['per_disc_numbering'].get(bool)
    if per_disc:
      from itertools import groupby
      def keyfunc(i):
        return i.disc or 1
      grouped = groupby(sorted(items, key=keyfunc), keyfunc)
      by_disc = dict((k, list(v)) for k, v in grouped)
    else:
      by_disc = {1: items}

    for disc, disc_items in by_disc.items():
      tracktotal = disc_items[0].tracktotal
      if tracktotal:
        if (tracktotal - len(disc_items)) > 0:
          return True
      else:
        # Lacking tracktotals, the best we can do is make some assumptions
        # based on the track numbers. If we have a single track 9, clearly
        # tracks 1 through 8 are missing.
        tracknumbers = [item.track for item in disc_items]
        highest = max(tracknumbers)
        if highest:
          existing = len(disc_items)
          if highest != existing:
            return True
          else:
            tracknumbers.sort()
            if tracknumbers != list(range(1, highest+1)):
              return True
    return False

  # This is flagged as a compilation, but all the track artists are the same.
  # Consider setting albumartist instead. This only works when missing:0 at
  # the moment, as I can't get to the list of *available* tracks, only the
  # existing ones.
  is_comp_same_artists: comp and all(item.artist == items[0].artist for item in items)

  has_explicit_track: any(getattr(item, 'advisory', 0) == 1 for item in items)

  all_same_genres: all(item.genre == items[0].genre for item in items)

  album_genres: "','.join(sorted(set(item.genre for item in items)))"

  # For albums with bpm tags on all their tracks, give us the mean
  average_bpm: |
    item_bpms = [getattr(i, 'bpm', 0) for i in items]
    if all(i > 0 for i in item_bpms):
      return int(sum(item_bpms) / len(items))
    else:
      return 0

item_fields:
  item_field_context: "', '.join(g for g in sorted(globals()) if not g.startswith('__'))"

  excess_tracks: bool(tracktotal and track and track > tracktotal)

  # disc and track prefix with ' - ' sep. Returns '' if track == 0 or this is the only track.
  disc_and_track_pre: |
    if not track or (tracktotal and tracktotal == 1):
      return ''
    elif disctotal > 1:
      return u'%02i.%02i - ' % (disc, track)
    else:
      return u'%02i - ' % track

  # Strip the leading zero
  trim_track: str(track)
  trim_disc: str(disc)

  explicit_or_clean: |
    if 'advisory' in globals():
      if advisory == 1:
        return ' (Explicit)'
      elif advisory == 2:
        return ' (Clean)'
    else:
      return ''

  definite_year: u'%04i' % original_year or original_date[:3] or year or date[:3] or 0

album_formats:
  format_album: '[$id] $albumartist - $album'

  # Convenience
  album_id: '$id'

  # Used in path formats
  comp_albumartist_credit: '%if{$comp,Compilations,%if{$albumartist_credit,$albumartist_credit,$albumartist}}'
  comp_albumartist: '%if{$comp,Compilations,$albumartist}'
  albumsdir: '%if{$incomplete,Incomplete }Albums'
  _albumdir: '%the{%replace{adjust_album,$album%aunique{}}}%if{$e_albumadvisory, (Explicit)}'
  _albumartistdir: '%asciify{%replace{adjust_artist,$comp_albumartist}}'

  # Fallbacks from item fields
  albumdir: '$_albumdir'
  albumartistdir: '$_albumartistdir'

  # Deal with undefined values for queries
  # This isn't undefined, but is negative when tracktotal/albumtotal is 0
  e_missing: '%if{$albumtotal,$missing,0}'
  e_albumadvisory: '%ifdef{albumadvisory}'
  e_data_source: '%ifdef{data_source}'

item_formats:
  format_item: '[$id] %if{$singleton,,$album - $disc_and_track_pre}$artist - $full_title'

  # Used in path formats
  artist_title: '$path_artist - $full_title'
  # singleton is an item field, not an album field, obviously..
  albumdir: '%if{$singleton,[non-album tracks],$_albumdir}'
  albumartistdir: '%if{$singleton,$path_artist,$_albumartistdir}'
  path_artist: '%asciify{%replace{adjust_artist,$artist}}'
  full_title: '$title%if{$e_advisory,$explicit_or_clean}'
  comp_filename: '%if{$singleton,,$disc_and_track_pre}%if{$comp,$path_artist - }$full_title'
  # Unasciified, credited artist
  path_filename: '%if{$singleton,,$disc_and_track_pre}%if{$comp,%if{$artist_credit,$artist_credit,$artist} - }$full_title'

  # Deal with undefined values for queries. This lets me do ls e_advisory:0,
  # instead of having to check for advisory:@.
  e_advisory: '%ifdef{advisory}'
  e_alt_dap: '%ifdef{alt.dap}'
  e_data_source: '%ifdef{data_source}'

album_queries:
  # This is used both in an alias command and an import hook
  is_various_not_comp: 'comp:0 albumartist:@"Various Artists"'

item_queries:
  is_music: '^query:is_non_music'
  is_complete: 'incomplete:0'

  is_non_music: 'genre:speech , genre:meditation , genre:dharma , genre:book , genre:spoken , genre:background , albumtype:spokenword , albumtype:audiobook , albumtype:"audio drama" , albumtype:interview'
  is_christmas: 'genre:Christmas , genre:Holiday'
  is_classical: 'genre:Classical'
  is_live: 'albumtype:live'
  is_game: 'genre:game , genre:videogame , genre:vgm'
  is_soundtrack: 'genre:soundtrack , albumtype:soundtrack'
  is_single: 'albumtype:single'
  is_mfp: 'label:"Music for Programming"'
  is_ocremix: 'label:"OverClocked ReMix"'
  is_sampler: 'albumtype:sampler , album:sampler'

  dap_classical: 'genre:Classical ^artist:"Christopher Tin"'
  dap_game: 'query:is_game query:is_soundtrack'
  dap_game_extra: 'query:is_game ^query:is_soundtrack'

alternatives:
  dap:
    directory: ../DAP
    formats: link
    paths:
      query:is_non_music : '%replace_path{dap_replace,Non-Music/$genre/$albumartistdir/$albumdir/$comp_filename}'
      query:is_mfp       : '%replace_path{dap_replace,Albums/$label/$label/$full_title}'
      query:is_christmas : '%replace_path{dap_replace,Christmas Music/$albumartistdir/$albumdir/$comp_filename}'
      query:is_ocremix   : '%replace_path{dap_replace,Game Music/$label/$albumdir/$comp_filename}'
      query:dap_game_extra: '%replace_path{dap_replace,Game Music/$albumartistdir/$albumdir/$comp_filename}'
      query:dap_game      : '%replace_path{dap_replace,Game Soundtracks/$albumdir/$comp_filename}'
      query:dap_classical : '%replace_path{dap_replace,Classical Music/$albumartistdir/%replace_path{adjust_classical_album,$albumdir}/$comp_filename}'
      singleton          : '%replace_path{dap_replace,Single Tracks/$artist_title}'
      query:is_sampler   : '%replace_path{dap_replace,%if{$single_track,Single Tracks/$artist_title,Samplers/$albumdir/$comp_filename}}'
      query:is_single    : '%replace_path{dap_replace,Singles/$albumartistdir/%replace_path{no_single_suffix,$albumdir}/$comp_filename}'
      query:is_soundtrack: '%replace_path{dap_replace,%if{$single_track,Single Tracks/$artist_title,Soundtracks/$albumdir/$comp_filename}}'
      comp:1             : '%replace_path{dap_replace,%if{$single_track,Single Tracks/$artist_title,Compilations/$albumdir/$comp_filename}}'
      default            : '%replace_path{dap_replace,%if{$single_track,Single Tracks/$artist_title,$albumsdir/$albumartistdir/$albumdir/$comp_filename}}'

no_single_suffix:
  ' - Single$': ''

adjust_album:
  # Consistency
  'Video Games Live, Volume One': 'Video Games Live: Level 1'
  'Computec Edition Vol. 1': 'Computec Edition, Vol. 1'
  'Kentucky Route Zero, Act II': 'Kentucky Route Zero - Act II'
  'HGTV / Paste': 'HGTV & Paste'
  # Shorten album length
  'Ultima V: Warriors of Destiny - The Lazarus Project Official Soundtrack': 'Ultima V: Lazarus Soundtrack'
  'Monument Valley Official Game Soundtrack Volumes 1 & 2': 'Monument Valley Soundtrack'
  "Broken Sword: Shadow of the Templars – Director's Cut": 'Broken Sword'
  'Incredible Adventures of Van Helsing': 'Van Helsing'
  # Easier to locate by game name
  'Sogno di Volare \(Civilization VI Main Theme\)': 'Civilization VI'
  # Add missing # in the series
  'Quest for Glory: Shadows of Darkness (official soundtrack)': 'Quest for Glory IV: Shadows of Darkness'

adjust_classical_album:
  ' *[,;/／].*': ''

adjust_artist:
  # Deal with non-alphanumeric sort issues when browsing
  ':wumpscut:': 'wumpscut'
  '\.mpegasus': 'mpegasus'
  '_ensnare_': 'ensnare'
  '“Weird Al” Yankovic': 'Weird Al Yankovic'

  # Remove featuring artists for navigation
  ' ([fF]([eE][aA])?[tT]\.|w[/／]) .*': ''

  # Multi-artist
  ' / .*': ''
  ' *[,;](?! *Jr).*': ''

  # Consistency
  'George Alistair Sanger': 'George Sanger'

  # Ease navigation
  'Amanda Palmer \+ The Grand Theft Orchestra': 'Amanda Palmer'
  'Amanda Palmer & The Grand Theft Orchestra': 'Amanda Palmer'
  'Bob Seger & the Silver Bullet Band': 'Bob Seger'
  'Ben Harper With Charlie Musselwhite': 'Ben Harper'
  'Bob Marley & The Wailers': 'Bob Marley'
  'Stafford Bawler + Todd Baker': 'Stafford Bawler'

# These replacements improve the visuals and navigation on the media player
dap_replace:
  # Marks I don't care about
  ' *[™®©]': ''

  # Visual cleanup
  '[\x00-\x1f]': _
  '^\s+': ''
  '\s+$': ''

  # Revert asciify for certain chars
  '\.\.\.': '…'

  # Bad font rendering for these characters on the Shanling M0 DAP
  '“': '"'
  '”': '"'
  '‘': "'"
  '’': "'"

include:
  - config.d/smartplaylist.yaml

#  vim: set et sts=2 sw=2 :
